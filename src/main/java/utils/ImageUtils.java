package utils;

import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.filechooser.FileNameExtensionFilter;

import org.imgscalr.Scalr;

/**
 * Class includes all Image utilities that are used throughout the code,
 * including selecting, transforming and parsing image data between types.
 */
public class ImageUtils {

	/**
	 * Receives an InputStream (Normally obtained from a SQL query result set) and returns a BufferedImage
	 * @param imageBytes an array of bytes, an image
	 * @return the bufferedImage generated by the byte array. Returns null if it couldn't read the Image.
	 */
	public static BufferedImage fromBinaryToBufferedImage(byte[] imageBytes) {
		BufferedImage image = null;
		try {
			ByteArrayInputStream bais = new ByteArrayInputStream(imageBytes);

			image = ImageIO.read(bais);

			if (image == null) {
				System.out.println("Error: Image couldn't be read");
			}
		} catch (IOException e) {
			e.printStackTrace();
		}

		return image;
	}

	/**
	 * Receives a File (Normally selected from a JFileChooser) and returns a byte
	 * array that can be saved into the database as BLOB
	 * 
	 * @param imageFile the file to parse to binary
	 * @return byte[] array of the image file. Returns an array with 1 empty element if it couldn't complete the operation.
	 */
	public static byte[] toBinary(File imageFile) {
		byte[] imageBytes = new byte[0];
		try (FileInputStream fis = new FileInputStream(imageFile)) {
			imageBytes = new byte[(int) imageFile.length()];
			fis.read(imageBytes);

		} catch (IOException e) {
			e.printStackTrace();
		}

		return imageBytes;
	}

	/**
	 * Receives a BufferedImage and the format to convert that image to, and returns
	 * a byte[] array that can be saved into the database as BLOB
	 * 
	 * @param image  -> The image thats going to be converted
	 * @param format -> Can be "PNG" or "JPEG"
	 * @return The byte array if it could write the image. Null if else.
	 */
	public static byte[] bufferedImageToByteArray(BufferedImage image, String format) {
		ByteArrayOutputStream baos = new ByteArrayOutputStream();
		try {
			ImageIO.write(image, format, baos);
			baos.flush();

			return baos.toByteArray();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			try {
				baos.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		return null;
	}

	/**
	 * Simple parsing from Icon to BufferedImage.
	 * @param icon the icon to parse.
	 * @return the bufferedImage, if it could successfully perform the operation.
	 */
	public static BufferedImage iconToBufferedImage(Icon icon) {
		BufferedImage bufferedImage = new BufferedImage(icon.getIconWidth(), icon.getIconHeight(),
				BufferedImage.TYPE_INT_ARGB);

		Graphics2D g2d = bufferedImage.createGraphics();
		icon.paintIcon(null, g2d, 0, 0);
		g2d.dispose(); //

		return bufferedImage;
	}

	/**
	 * Selects a new image for a label, and displays it as an icon for it.
	 * 
	 * @param label -> The label to do the operation on.
	 */
	public static void selectNewImg(JLabel label) {
		BufferedImage bufferedImage = null;

		JFileChooser fileChooser = new JFileChooser();

		FileNameExtensionFilter filter = new FileNameExtensionFilter("Select only files with extension: .png", "png");

		fileChooser.setFileFilter(filter);

		int result = fileChooser.showOpenDialog(null);

		if (result == JFileChooser.APPROVE_OPTION) {
			File selectedFile = fileChooser.getSelectedFile();

			try {
				bufferedImage = Scalr.resize(ImageIO.read(selectedFile), 230, 230);
			} catch (IOException e) {
				e.printStackTrace();
			} catch (Exception e) {
				e.printStackTrace();
			}

			label.setIcon(new ImageIcon(bufferedImage));
		}
	}

}
